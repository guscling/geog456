<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
    integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
    crossorigin=""/>    
    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
    integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
    crossorigin=""></script>
    
    <script src='./EU_migration_Data_simplified.js'></script>
    <script src='./marker_points.js'></script>

    <link rel="stylesheet" href="/Users/gusclingroth/GEOG456/Final Project/Control.MiniMap.min.css"/>
    <script src="./Control.MiniMap.min.js"></script>

<!-- <script type="module">import center from './@turf/center';</script>
    <script type="module">import centroid from './@turf/centroid';</script> -->

    </script>

    <style>
        /* CSS styles for layout */
        #wrapper {
            display: flex;
            height: 100vh;
            min-height: 100%;
        }

        #map {
            flex: 1;
            height: 100%;
            min-height: 100%;
            width: 100%;
            float: right; /* Float map to the right */
            background-color: black; /* Black background for map */
            border: 1px solid black; /* Optional: Add border for map */
        }

        #sideBar {
            width: 25%;
            padding: 20px;
            box-sizing: border-box;
            background-color: #f0f0f0; /* Light gray background for buttons */
            float: left;
            position: relative;
        }

        .button {
            margin-bottom: 10px;
            padding:   10px 10px;
            font-size: 16px;
            background-color: rgb(73, 62, 62);
            color: white;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }

        .button:hover {
            background-color: #9f9090; /* Lighter gray on hover */
        }
        #buttonInstructions{
            font-size: larger;
            text-align: center;
            font-weight: 1000;
        }
        .legend {
            line-height: 18px;
            color: #555;
        }
        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }

        .info.legendMarker {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .info.legendMarker span {
            margin-right: 10px;
            font-weight: bold;
        }
        #dataExplanation{
            position: relative;
        }
        #title{
            float: top;
        }       
    </style>
</head>

<body>
    <h1 id="tile">Is Public Opinion of Migration Impacted by the Number of Assylum Seekers in the EU?</h1>
    <div id="wrapper">
        <div id="sideBar">
            <p id="buttonInstructions">Click buttons to change year</p>
            <button class="button" id="Button2014">2014</button>
            <button class="button" id="Button2015">2015</button>
            <button class="button" id="Button2016">2016</button>
            <button class="button" id="Button2017">2017</button>
            <button class="button" id="Button2018">2018</button>
            <button class="button" id="Button2019">2019</button>
            <button class="button" id="Button2020">2020</button>
            <button class="button" id="Button2021">2021</button>
            <button class="button" id="Button2022">2022</button>
            <button class="button" id="Button2023">2023</button>

            <div id="dataExplaination">
                
            </div>
        </div>
        <div id="map"></div>
    </div>

    <script>
    
        // Add leflet map and json layer to it
        var map = L.map('map',{
            zoomControl: false,
            scrollWheelZoom: false,
            minZoom: 4,
            maxZoom:4,
            attributionControl: false,
        }).setView([55.55349545845371,22.042223059183976], 4)
            L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png?api_key=c72e380a-078b-4579-84ab-95ae1f64f20d', {
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                }).addTo(map);

        map.dragging.disable();


        var myStyle = {
            "color": "#ff7800",
            "weight": 1,
            "fillOpacity": .65
        };


        // Set year variable used for updating data- Initially set at 2014 with querySelector of first button
        var yearText = document.querySelector('.button').textContent;
        var year = parseInt(yearText)

        // Pepare the color of the tiles based on positive and negative opinion responses (2014-2020, 2023 only)
        function getColorPos(p) {
        return p > 80  ? '#276419' :
               p > 60  ? '#4d9221' :
               p > 40  ? '#7fbc41' :
               p > 20  ? '#b8e186' :
               p > 0   ? '#e6f5d0' :
                         'transparent';
        }

        function getColorNeg(n) {
        return  n > 80  ? '#8e0152' :
                n > 60  ? '#c51b7d' :
                n > 40  ? '#de77ae' :
                n > 20  ? '#f1b6da' :
                n >  0  ? '#fde0ef' :
                          'transparent';
        }

        function getSize(a) {
            return a > 500000 ? 40:
                   a > 100000 ? 30:
                   a > 50000  ? 25:
                   a > 10000  ? 20:
                   a > 5000   ? 15:
                   a > 500    ? 10:
                   a < 100    ? 5:
                   
                                0;            
        }

        function circleColor(a) {
            return a > 0 ? "black":
                        "transparent"
        }

        function radius(feature) {
            
            var assylumApps = feature.properties["GEOG456_Total_Data_Assylum_Apps_" + year];
            var radius = getSize(assylumApps)
            var color = circleColor(assylumApps)
    

            return {
                radius: radius,
                fillColor: "transparent",
                color: color,
                dashArray:4,
                weight: 2.5,
                opacity: 1,
                fillOpacity: 0.8}
            }
        
    
        //Set color of tiles based on negative/positive responses.
        function style(feature) {

            var positiveOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Positive"];
            var negativeOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Negative"];
            var fillColor = positiveOpinon > negativeOpinon ? getColorPos(positiveOpinon) : getColorNeg(negativeOpinon);

            return {
                fillColor: fillColor,
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
                };
            }

        // Add geoJSON to map with initial style based on 2014 data
        var addPolyJson = L.geoJSON(migrationData, {style: style}).addTo(map);
        var addPointJson = L.geoJSON(points, {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, radius);
        }
            }).setStyle(radius).addTo(map);

        // On click of buttons, set style based on year
        const myButtons = document.querySelectorAll("button");
        myButtons.forEach(button => {
            button.addEventListener('click', () => {
                map.removeLayer(addPolyJson);
                map.removeLayer(addPointJson);
                yearText = button.textContent;
                year = parseInt(yearText);
                console.log(year);
                addPolyJson = L.geoJSON(migrationData, {style: style}).addTo(map);
                addPointJson.setStyle(radius)
                addPointJson.addTo(map);
                miniPolyStyleBen(year);
                miniMarkerStyleBen(year);
                miniPolyStyleCen(year);
                miniMarkerStyleCen(year);  
                miniPolyStyleMal(year);
                miniMarkerStyleMal(year);
                dataExplaination(year);

                
            })
        });
        //Temp: Bind popup of country names when clicked
        addPolyJson.eachLayer((layer) => {
            layer.bindPopup(layer.feature.properties.GEOUNIT);
        })

        var legendPos = L.control({position: 'topleft'});
        legendPos.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var title = '<strong>Percent Positive Responses</strong><br>'; // Title text

            var grades = [0, 20, 40, 60, 80];
            var labels = [];

            // Loop through our density intervals and generate a label with a colored square for each interval
            for (var i = 0; i < grades.length; i++) {
                labels.push(
                    '<i style="background:' + getColorPos(grades[i] + 1) + '"></i> ' +
                    grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] : '+')
                );
            }

            div.innerHTML = title + labels.join('<br>');
            return div;
        };
        legendPos.addTo(map);


        var legendNeg = L.control({position: 'topleft'});
        legendNeg.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            var title = '<strong>Percent Negative Responses</strong><br>'; // Title text

            var grades = [0, 20, 40, 60, 80];
            var labels = [];

            // Loop through our density intervals and generate a label with a colored square for each interval
            for (var i = 0; i < grades.length; i++) {
                labels.push(
                    '<i style="background:' + getColorNeg(grades[i] + 1) + '"></i> ' +
                    grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1]: '+')
                );
            }

            div.innerHTML = title + labels.join('<br>');
            return div;
        };
        legendNeg.addTo(map);

        
        
        var legendMarker = L.control({ position: 'topleft' });
        legendMarker.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legendMarker');
            var title = '<strong>Number of Assylum <br> Applicants</strong><br>'; // Title text

            var grades = [0,500,5000,10000,50000,100000,500000];
            var labels = [];

            // Loop through grades and generate a label with a circle marker for each grade
            for (var i = 0; i < grades.length; i++) {
                var size = getSize(grades[i] + 1)*2;
                labels.push(
                    '<i style="background: transparent;"></i> ' +
                    '<span style="display: inline-block; width: ' + size + 'px; height: ' + size + 'px; background-color: transparent; border-radius: 50%; border: 3px dashed black;"></span> ' +
                    grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] : '+')
                );
            }

        div.innerHTML = title + labels.join('<br>');
        return div;
};
legendMarker.addTo(map);



        //addPolyJson.eachLayer(function(layer) {
        //   if (layer.feature.geometry.type === 'MultiPolygon') {
        //       console.log(layer.feature.geometry.coordinates[0]);}})

        var miniOsmBen = L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png?api_key=c72e380a-078b-4579-84ab-95ae1f64f20d', {
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                    minZoom: 6,
                    maxZoom: 6,
        });
        
        var miniPolyBen = L.geoJSON(migrationData, {style: style});
    
        var miniMarkersBen = L.geoJSON(points, {
            pointToLayer: function (feature, latlng) {
            return L.circleMarker(latlng, radius);
        }
            }).setStyle(radius);

        var miniLayersBen = new L.LayerGroup([miniPolyBen,miniMarkersBen,miniOsmBen]);
        var miniMapBen = new L.Control.MiniMap(miniLayersBen, {
            centerFixed: [51.4, 5.4623],
            zoomLevelFixed: 6,
            height: 300,
            width: 300,
            aimingRectOptions: {color: 'transparent'},
            position:'bottomright',
            }).addTo(map);

        function miniPolyStyleBen(year) {
            miniPolyBen.setStyle(function (feature) {
                var positiveOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Positive"];
                var negativeOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Negative"];
                var fillColor = positiveOpinon > negativeOpinon ? getColorPos(positiveOpinon) : getColorNeg(negativeOpinon);

                return{
                    fillColor:fillColor,
                    weight: 2,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7,
                };
            });
        };

        function miniMarkerStyleBen(year) {
            miniMarkersBen.eachLayer(function (layer) {
                var assylumApps = layer.feature.properties["GEOG456_Total_Data_Assylum_Apps_" + year];
                var radius = getSize(assylumApps);
                var color = circleColor(assylumApps);

                layer.setStyle({
                    radius: radius,
                    fillColor: "transparent",
                    color: color,
                    dashArray: 4,
                    weight: 2.5,
                    opacity: 1,
                    fillOpacity: 0.8,
                });
            });
        }


        var miniOsmCen = L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png?api_key=c72e380a-078b-4579-84ab-95ae1f64f20d', {
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                    minZoom: 5,
                    maxZoom: 5,
        });
        var miniPolyCen = L.geoJSON(migrationData, {style: style});
        var miniMarkersCen = L.geoJSON(points, {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, radius);
        }
            }).setStyle(radius);
        var miniLayersCen = new L.LayerGroup([miniOsmCen,miniMarkersCen,miniPolyCen]);
        
        var miniMapCen = new L.Control.MiniMap(miniLayersCen, {
            centerFixed: [47.6817, 16.5845],
            zoomLevelFixed: 5,
            height: 250,
            width: 250,
            position: 'topright',
            aimingRectOptions: {color: 'transparent'},
            }).addTo(map);

        function miniPolyStyleCen(year) {
            miniPolyCen.setStyle(function (feature) {
                var positiveOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Positive"];
                var negativeOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Negative"];
                var fillColor = positiveOpinon > negativeOpinon ? getColorPos(positiveOpinon) : getColorNeg(negativeOpinon);

                return{
                    fillColor:fillColor,
                    weight: 2,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7
                };
            });
        };

        function miniMarkerStyleCen(year) {
            miniMarkersCen.eachLayer(function (layer) {
                var assylumApps = layer.feature.properties["GEOG456_Total_Data_Assylum_Apps_" + year];
                var radius = getSize(assylumApps);
                var color = circleColor(assylumApps);

                layer.setStyle({
                    radius: radius,
                    fillColor: "transparent",
                    color: color,
                    dashArray: 4,
                    weight: 2.5,
                    opacity: 1,
                    fillOpacity: 0.8
                });
            });
        }

        var miniOsmMal = L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_toner_lite/{z}/{x}/{y}{r}.png?api_key=c72e380a-078b-4579-84ab-95ae1f64f20d', {
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                    minZoom:8,
                    maxZoom:8,
        });
        var miniPolyMal = L.geoJSON(migrationData, {style: style});    
        var miniMarkersMal = L.geoJSON(points, {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, radius);
        }
            }).setStyle(radius);
        var miniLayersMal = new L.LayerGroup([miniOsmMal,miniMarkersMal,miniPolyMal]);
        
        var miniMapMal = new L.Control.MiniMap(miniLayersMal, {
            centerFixed: [35.8992, 14.4141],
            zoomLevelFixed: 8,
            height: 130,
            width: 150,
            position: 'topright',
            aimingRectOptions: {color: 'transparent'},
            }).addTo(map);

        function miniPolyStyleMal(year) {
            miniPolyMal.setStyle(function (feature) {
                var positiveOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Positive"];
                var negativeOpinon = feature.properties["GEOG456_Total_Data_" + year + "_Negative"];
                var fillColor = positiveOpinon > negativeOpinon ? getColorPos(positiveOpinon) : getColorNeg(negativeOpinon);

                return{
                    fillColor:fillColor,
                    weight: 2,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7
                };
            });
        };

        function miniMarkerStyleMal(year) {
            miniMarkersMal.eachLayer(function (layer) {
                var assylumApps = layer.feature.properties["GEOG456_Total_Data_Assylum_Apps_" + year];
                var radius = getSize(assylumApps);
                var color = circleColor(assylumApps);

                layer.setStyle({
                    radius: radius,
                    fillColor: "transparent",
                    color: color,
                    dashArray: 4,
                    weight: 2.5,
                    opacity: 1,
                    fillOpacity: 0.8
                });
            });
        }

        var marker = new L.marker([35.5562, 14.961], { opacity: 0.01 });
        marker.bindTooltip("Malta", { permanent: true, offset: [0, 0] });
        marker.addTo(miniLayersMal);

        var marker = new L.marker([43.4563, 23.0131], { opacity: 0.01 });
        marker.bindTooltip("Central Europe", { permanent: true, offset: [0, 0] });
        marker.addTo(miniLayersCen);

        var marker = new L.marker([49.1253, 9.2396], { opacity: 0.01 });
        marker.bindTooltip("Benelux", { permanent: true, offset: [0, 0] });
        marker.addTo(miniLayersBen);

        function dataExplaination(year) {
            var docExp = document.getElementById("dataExplaination");
            if (year == 2021){
                docExp.innerHTML=('This is the append for the year 2021');
            } else if (year == 2022){
                docExp.innerHTML=('This is the append for the year 2022');
            } else {
                docExp.innerHTML=("")
            };
        };

    </script>
    
</body>
</html>